@model ProcessManagement.Models.Process
@{
    ViewBag.Title = "EditProcess";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var link = ViewData["load"];
}



<body>
    <div class="block-header">
        <div class="row">
            <div class="col-lg-6 col-md-8 col-sm-12">
                <h2><a href="javascript:void(0);" class="btn btn-xs btn-link btn-toggle-fullwidth"><i class="fa fa-arrow-left"></i></a> Edit Process</h2>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="~/Home/Index" class="theme-color"><i class="icon-home"></i></a></li>
                    <li class="breadcrumb-item"><a href="/">Groups List</a></li>
                    <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "Show", groupid = Model.Group.Id })">Group: @Model.Group.Name</a></li>
                    <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "process", action = "ShowStep", processid = Model.Id })">@Model.Name </a></li>

                </ul>
            </div>
            @*<div class="col-lg-6 col-md-4 col-sm-12 text-right">
                <div class="bh_chart hidden-xs">
                    <div class="float-left m-r-15">
                        <small>Visitors</small>
                        <h6 class="mb-0 mt-1"><i class="icon-user"></i> 1,784</h6>
                    </div>
                    <span class="bh_visitors float-right">2,5,1,8,3,6,7,5</span>
                </div>
                <div class="bh_chart hidden-sm">
                    <div class="float-left m-r-15">
                        <small>Visits</small>
                        <h6 class="mb-0 mt-1"><i class="icon-globe"></i> 325</h6>
                    </div>
                    <span class="bh_visits float-right">10,8,9,3,5,8,5</span>
                </div>
                <div class="bh_chart hidden-sm">
                    <div class="float-left m-r-15">
                        <small>Chats</small>
                        <h6 class="mb-0 mt-1"><i class="icon-bubbles"></i> 13</h6>
                    </div>
                    <span class="bh_chats float-right">1,8,5,6,2,4,3,2</span>
                </div>
            </div>*@
        </div>
    </div>
    <hr />
    <div id="sample">
        <button id="btn-save" type="submit" class="btn btn-success"> save to db</button>
        <div style="width: 100%; display: flex; justify-content: space-between">
            <div id="myPaletteDiv" style="width: 105px; margin-right: 2px; background-color: whitesmoke; border: solid 1px black"></div>
            <div id="myDiagramDiv" style="flex-grow: 1; height: 620px; border: solid 1px black"></div>
        </div>

        <div>
            <div>
                <button id="SaveButton" onclick="save()" style="display: none">Save</button>@*button này để tạo dữ liệu*@
                <button onclick="load()" style="display: none">Load</button>@*button này để load dữ liệu*@
                @*button này để lưu dữ liệu*@
            </div>
            <textarea id="mySavedModel" style="width:100%;height:300px;display: none">
{ 
  "nodeDataArray": [
 ],
  "linkDataArray": [
 ]}
    </textarea>
            <input type="hidden" id="stringJson" value="@link" />
        </div>
    </div>
</body>


@section CustomScripts {
    <script src="~/Content/build/js/go.js"></script>
    <!-- <script src="../assets/js/goSamples.js"></script> -->
    <!-- this is only for the GoJS Samples framework -->
    <script id="code">
        function init() {
            if (window.goSamples) goSamples(); // init for these samples -- you don't need to call this
            var $ = go.GraphObject.make; // for conciseness in defining templates
            myDiagram =
                $(go.Diagram, "myDiagramDiv", // must name or refer to the DIV HTML element
                    {
                        grid: $(go.Panel, "Grid",
                            $(go.Shape, "LineH", {
                                stroke: "lightgray",
                                strokeWidth: 0.5
                            }),
                            $(go.Shape, "LineH", {
                                stroke: "gray",
                                strokeWidth: 0.5,
                                interval: 10
                            }),
                            $(go.Shape, "LineV", {
                                stroke: "lightgray",
                                strokeWidth: 0.5
                            }),
                            $(go.Shape, "LineV", {
                                stroke: "gray",
                                strokeWidth: 0.5,
                                interval: 10
                            })
                        ),
                        allowDrop: true, // must be true to accept drops from the Palette
                        "draggingTool.dragsLink": true,
                        "draggingTool.isGridSnapEnabled": true,
                        "linkingTool.isUnconnectedLinkValid": true,
                        "linkingTool.portGravity": 20,
                        "relinkingTool.isUnconnectedLinkValid": true,
                        "relinkingTool.portGravity": 20,
                        "relinkingTool.fromHandleArchetype": $(go.Shape, "Diamond", {
                            segmentIndex: 0,
                            cursor: "pointer",
                            desiredSize: new go.Size(8, 8),
                            fill: "tomato",
                            stroke: "darkred"
                        }),
                        "relinkingTool.toHandleArchetype": $(go.Shape, "Diamond", {
                            segmentIndex: -1,
                            cursor: "pointer",
                            desiredSize: new go.Size(8, 8),
                            fill: "darkred",
                            stroke: "tomato"
                        }),
                        "linkReshapingTool.handleArchetype": $(go.Shape, "Diamond", {
                            desiredSize: new go.Size(7, 7),
                            fill: "lightblue",
                            stroke: "deepskyblue"
                        }),
                        rotatingTool: $(TopRotatingTool), // defined below
                        "rotatingTool.snapAngleMultiple": 15,
                        "rotatingTool.snapAngleEpsilon": 15,
                        "undoManager.isEnabled": true
                    });
            // when the document is modified, add a "*" to the title and enable the "Save" button
            myDiagram.addDiagramListener("Modified", function (e) {
                var button = document.getElementById("SaveButton");
                if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf("*");
                if (myDiagram.isModified) {
                    if (idx < 0) document.title += "*";
                } else {
                    if (idx >= 0) document.title = document.title.substr(0, idx);
                }
            });
            // Define a function for creating a "port" that is normally transparent.
            // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
            // and where the port is positioned on the node, and the boolean "output" and "input" arguments
            // control whether the user can draw links from or to the port.
            function makePort(name, spot, output, input) {
                // the port is basically just a small transparent square
                return $(go.Shape, "Circle", {
                    fill: null, // not seen, by default; set to a translucent gray by showSmallPorts, defined below
                    stroke: null,
                    desiredSize: new go.Size(7, 7),
                    alignment: spot, // align the port on the main Shape
                    alignmentFocus: spot, // just inside the Shape
                    portId: name, // declare this object to be a "port"
                    fromSpot: spot,
                    toSpot: spot, // declare where links may connect at this port
                    fromLinkable: output,
                    toLinkable: input, // declare whether the user may draw links to/from here
                    cursor: "pointer" // show a different cursor to indicate potential link point
                });
            }
            var nodeSelectionAdornmentTemplate =
                $(go.Adornment, "Auto",
                    $(go.Shape, {
                        fill: null,
                        stroke: "deepskyblue",
                        strokeWidth: 1.5,
                        strokeDashArray: [4, 2]
                    }),
                    $(go.Placeholder)
                );
            var nodeResizeAdornmentTemplate =
                $(go.Adornment, "Spot", {
                    locationSpot: go.Spot.Right
                },
                    $(go.Placeholder),
                    $(go.Shape, {
                        alignment: go.Spot.TopLeft,
                        cursor: "nw-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.Top,
                        cursor: "n-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.TopRight,
                        cursor: "ne-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.Left,
                        cursor: "w-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.Right,
                        cursor: "e-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.BottomLeft,
                        cursor: "se-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.Bottom,
                        cursor: "s-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        alignment: go.Spot.BottomRight,
                        cursor: "sw-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    })
                );
            var nodeRotateAdornmentTemplate =
                $(go.Adornment, {
                    locationSpot: go.Spot.Center,
                    locationObjectName: "CIRCLE"
                },
                    $(go.Shape, "Circle", {
                        name: "CIRCLE",
                        cursor: "pointer",
                        desiredSize: new go.Size(7, 7),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $(go.Shape, {
                        geometryString: "M3.5 7 L3.5 30",
                        isGeometryPositioned: true,
                        stroke: "deepskyblue",
                        strokeWidth: 1.5,
                        strokeDashArray: [4, 2]
                    })
                );
            myDiagram.nodeTemplate =
                $(go.Node, "Spot", {
                    locationSpot: go.Spot.Center
                },
                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify), {
                        selectable: true,
                        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate
                    }, {
                        resizable: true,
                        resizeObjectName: "PANEL",
                        resizeAdornmentTemplate: nodeResizeAdornmentTemplate
                    }, {
                        rotatable: true,
                        rotateAdornmentTemplate: nodeRotateAdornmentTemplate
                    },
                    new go.Binding("angle").makeTwoWay(),
                    // the main object is a Panel that surrounds a TextBlock with a Shape
                    $(go.Panel, "Auto", {
                        name: "PANEL"
                    },
                        new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
                        $(go.Shape, "Rectangle", // default figure
                            {
                                portId: "", // the default port: if no spot on link data, use closest side
                                fromLinkable: true,
                                toLinkable: true,
                                cursor: "pointer",
                                fill: "white", // default color
                                strokeWidth: 2
                            },
                            new go.Binding("figure"),
                            new go.Binding("fill")),
                        $(go.TextBlock, {
                            font: "bold 11pt Helvetica, Arial, sans-serif",
                            margin: 8,
                            maxSize: new go.Size(160, NaN),
                            wrap: go.TextBlock.WrapFit,
                            editable: true
                        },
                            new go.Binding("text").makeTwoWay())
                    ),
                    // four small named ports, one on each side:
                    makePort("T", go.Spot.Top, false, true),
                    makePort("L", go.Spot.Left, true, true),
                    makePort("R", go.Spot.Right, true, true),
                    makePort("B", go.Spot.Bottom, true, false), { // handle mouse enter/leave events to show/hide the ports
                        mouseEnter: function (e, node) {
                            showSmallPorts(node, true);
                        },
                        mouseLeave: function (e, node) {
                            showSmallPorts(node, false);
                        }
                    }
                );

            function showSmallPorts(node, show) {
                node.ports.each(function (port) {
                    if (port.portId !== "") { // don't change the default port, which is the big shape
                        port.fill = show ? "rgba(0,0,0,.3)" : null;
                    }
                });
            }
            var linkSelectionAdornmentTemplate =
                $(go.Adornment, "Link",
                    $(go.Shape,
                        // isPanelMain declares that this Shape shares the Link.geometry
                        {
                            isPanelMain: true,
                            fill: null,
                            stroke: "deepskyblue",
                            strokeWidth: 0
                        }) // use selection object's strokeWidth
                );
            myDiagram.linkTemplate =
                $(go.Link, // the whole link panel
                    {
                        selectable: true,
                        selectionAdornmentTemplate: linkSelectionAdornmentTemplate
                    }, {
                        relinkableFrom: true,
                        relinkableTo: true,
                        reshapable: true
                    }, {
                        routing: go.Link.AvoidsNodes,
                        curve: go.Link.JumpOver,
                        corner: 5,
                        toShortLength: 4
                    },
                    new go.Binding("points").makeTwoWay(),
                    $(go.Shape, // the link path shape
                        {
                            isPanelMain: true,
                            strokeWidth: 2
                        }),
                    $(go.Shape, // the arrowhead
                        {
                            toArrow: "Standard",
                            stroke: null
                        }),
                    $(go.Panel, "Auto",
                        new go.Binding("visible", "isSelected").ofObject(),
                        $(go.Shape, "RoundedRectangle", // the link shape
                            {
                                fill: "#F8F8F8",
                                stroke: null
                            }),
                        $(go.TextBlock, {
                            textAlign: "center",
                            font: "10pt helvetica, arial, sans-serif",
                            stroke: "#919191",
                            margin: 2,
                            minSize: new go.Size(10, NaN),
                            editable: true
                        },
                            new go.Binding("text").makeTwoWay())
                    )
                );
            load(); // load an initial diagram from some JSON text
            // initialize the Palette that is on the left side of the page
            myPalette =
                $(go.Palette, "myPaletteDiv", // must name or refer to the DIV HTML element
                    {
                        maxSelectionCount: 1,
                        nodeTemplateMap: myDiagram.nodeTemplateMap, // share the templates used by myDiagram
                        linkTemplate: // simplify the link template, just in this Palette
                            $(go.Link, { // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,
                                // to line up the Link in the same manner we have to pretend the Link has the same location spot
                                locationSpot: go.Spot.Center,
                                selectionAdornmentTemplate: $(go.Adornment, "Link", {
                                    locationSpot: go.Spot.Center
                                },
                                    $(go.Shape, {
                                        isPanelMain: true,
                                        fill: null,
                                        stroke: "deepskyblue",
                                        strokeWidth: 0
                                    }),
                                    $(go.Shape, // the arrowhead
                                        {
                                            toArrow: "Standard",
                                            stroke: null
                                        })
                                )
                            }, {
                                    routing: go.Link.AvoidsNodes,
                                    curve: go.Link.JumpOver,
                                    corner: 5,
                                    toShortLength: 4
                                },
                                new go.Binding("points"),
                                $(go.Shape, // the link path shape
                                    {
                                        isPanelMain: true,
                                        strokeWidth: 2
                                    }),
                                $(go.Shape, // the arrowhead
                                    {
                                        toArrow: "Standard",
                                        stroke: null
                                    })
                            ),
                        model: new go.GraphLinksModel([ // specify the contents of the Palette
                            {
                                text: "Start",
                                figure: "Circle",
                                fill: "#1aff1a"
                            },
                            {
                                text: "Step"
                            },
                            {
                                text: "???",
                                figure: "Diamond",
                                fill: "lightskyblue"
                            },
                            {
                                text: "End",
                                figure: "Circle",
                                fill: "#f20000"
                            }
                        ], [
                                // the Palette also has a disconnected Link, which the user can drag-and-drop
                                {
                                    points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go
                                        .Point(30, 40), new go.Point(60, 40)
                                    ])
                                }
                            ])
                    });
        }

        function TopRotatingTool() {
            go.RotatingTool.call(this);
        }
        go.Diagram.inherit(TopRotatingTool, go.RotatingTool);
        TopRotatingTool.prototype.updateAdornments = function (part) {
            go.RotatingTool.prototype.updateAdornments.call(this, part);
            var adornment = part.findAdornment("Rotating");
            if (adornment !== null) {
                adornment.location = part.rotateObject.getDocumentPoint(new go.Spot(0.5, 0, 0, -30)); // above middle top
            }
        };
        TopRotatingTool.prototype.rotate = function (newangle) {
            go.RotatingTool.prototype.rotate.call(this, newangle + 90);
        };
        // end of TopRotatingTool class
        // Show the diagram's model in JSON format that the user may edit
        function save() {
            saveDiagramProperties(); // do this first, before writing to JSON
            document.getElementById("mySavedModel").value = myDiagram.model.toJson();
            myDiagram.isModified = false;
            
        }

        function load() {
            myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
            loadDiagramProperties(); // do this after the Model.modelData has been brought into memory
        }

        function onloadPage() {
            var json = $('#stringJson').val();
            myDiagram.model = go.Model.fromJson(json);
            loadDiagramProperties(); // do this after the Model.modelData has been brought into memory
        }

        function saveDiagramProperties() {
            myDiagram.model.modelData.position = go.Point.stringify(myDiagram.position);
        }

        function loadDiagramProperties(e) {
            // set Diagram.initialPosition, not Diagram.position, to handle initialization side-effects
            var pos = myDiagram.model.modelData.position;
            if (pos) myDiagram.initialPosition = go.Point.parse(pos);
        }

        window.onload = function () {
            init();
            onloadPage();
        }
    </script>
    <script>
    $(document).ready(function ($) {
        $('#btn-save').on('click', function () {
            map = {};
            Nodes = myDiagram.model.nodeDataArray;
            Links = myDiagram.model.linkDataArray;
            for (var i = 0; i < myDiagram.model.nodeDataArray.length; i++) {
                map[myDiagram.model.nodeDataArray[i].key] = myDiagram.model.nodeDataArray[i];
                myDiagram.model.nodeDataArray[i].input = 0;
                myDiagram.model.nodeDataArray[i].output = 0;
            }
            for (var i = 0; i < myDiagram.model.linkDataArray.length; i++) {
                if (Links[i].from != undefined) {
                    map[myDiagram.model.linkDataArray[i].from].output++;
                }
                if (Links[i].to != undefined) {
                    map[myDiagram.model.linkDataArray[i].to].input++;
                }
            }
            for (var i = 0; i < myDiagram.model.nodeDataArray.length; i++) {
                if (myDiagram.model.nodeDataArray[i].figure == 'Diamond') {
                    if (Nodes[i].output < 2) {
                        alert(Nodes[i].text + ' needs more output');
                        return false;
                    }
                    if (Nodes[i].output > 2) {
                        alert(Nodes[i].text + ' has too many output');
                        return false;
                    }
                    if (Nodes[i].input < 1) {
                        alert(Nodes[i].text + ' undefined input');
                        return false;
                    }
                    if (Nodes[i].text.trim() == "") {
                        alert(' please import condition name');
                        return false;
                    }
                }
            }
            for (var i = 0; i < Nodes.length; i++) {
                if (Nodes[i].figure == undefined) {
                    if (Nodes[i].text.trim() == "") {
                        alert(' please import step name')
                        return false;
                    }
                }
            }

            var count = 0;
            for (var i = 0; i < Nodes.length; i++) {
                if (Nodes[i].figure == 'Circle' && Nodes[i].fill == '#1aff1a') {
                    count++;
                    if (count == 2) {
                        alert('Has too many Start Step');
                        return false;
                    }
                    if (Nodes[i].output > 1) {
                        alert(Nodes[i].text + ' has too many output');
                        return false;
                    }
                    if (Nodes[i].input > 0) {
                        alert(Nodes[i].text + ' wrong structure');
                        return false;
                    }
                }
            }
            for (var i = 0; i < Nodes.length; i++) {
                if (Nodes[i].input == 0 && Nodes[i].output == 0) {
                    alert('Some steps disconnect with steps in process!');
                    return false;
                }
            }
            for (var i = 0; i < Links.length; i++) {
                if (Links[i].from == undefined || Links[i].to == undefined) {
                    alert('Check the connection between steps');
                    return false;
                }
            }
            for (var i = 0; i < myDiagram.model.nodeDataArray.length; i++) {
                if (myDiagram.model.nodeDataArray[i].figure == undefined) {
                    if (Nodes[i].output < 1) {
                        alert(Nodes[i].text + ' undefined output connection');
                        return false;
                    }
                    if (Nodes[i].output > 1) {
                        alert(Nodes[i].text + ' has to many output connection, ' + Nodes[i].text + ' undefined output connection');
                        return false;
                    }
                    if (Nodes[i].input < 1) {
                        alert(Nodes[i].text + ' undefined input connection');
                        return false;
                    }
                }
            }
            for (var i = 0; i < myDiagram.model.nodeDataArray.length; i++) {
                if (myDiagram.model.nodeDataArray[i].fill == '#f20000') {
                    if (Nodes[i].output > 0) {
                        alert(Nodes[i].text + ' wrong structure');
                        return false;
                    }
                }
            }

            let stepstart = [];
            let stepend = [];
            let stepdiamond = [];
            for (var i = 0; i < Nodes.length; i++) {
                if (Nodes[i].figure == 'Circle' && Nodes[i].fill == '#1aff1a') {
                    stepstart = Nodes[i];
                }
                if (Nodes[i].figure == 'Circle' && Nodes[i].fill == '#f20000') {
                    stepend.push(Nodes[i]);
                }
                if (Nodes[i].figure == 'Diamond') {
                    stepdiamond.push(Nodes[i]);
                }
            }
            for (var i = 0; i < Links.length; i++) {
                for (var j = 0; j < stepend.length; j++) {
                    if (Links[i].from == stepstart.key && Links[i].to == stepend[j].key) {
                        alert('Process structure wrong');
                        return false;
                    }
                    for (var k = 0; k < stepdiamond.length; k++) {
                        //if (Links[i].from == stepdiamond[k].key && Links[i].to == stepend[j].key) {
                        //    alert('Process structure wrong');
                        //    return false;
                        //}
                        if (Links[i].from == stepstart.key && Links[i].to == stepdiamond[k].key) {
                            alert('Process structure wrong');
                            return false;
                        }
                    }
                }
            }

            let data = $("#mySavedModel").val();
            let img = myDiagram.makeImageData({
                scale: 1,
                background: "rgba(255, 255, 255, 0.1)",
                type: "image/png"
            });
            img.classname = '@Model.Id-@Model.Name';
            //saveDiagramProperties();
            let idProcess = @Model.Id;
            let b = []
            let linkdata = myDiagram.model.linkDataArray;
            for (var link of linkdata) {
                let c = {
                    from: link["from"],
                    to : link["to"]
                }
                b.push(c);
            }
            //truyen nguyen cai json voi idGroup
            let a = {
                data: myDiagram.model.toJson(),
                processId: idProcess,
                nodeData: JSON.stringify(myDiagram.model.nodeDataArray),
                linkData: JSON.stringify(b),
                imageprocess: img
            }
            //truyen qua controller
            $.ajax({
                url: "@Url.RouteUrl("GroupLocalizedDefault", new { controller = "Process", action = "EditProcess" })",
                type: "POST",
                data: a,
                dataType: "json",
                success: function (response) {
                    //thanh cong thi no tra du lieu ve
                    location.href = '@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "Process", action = "ShowStep", groupslug = Model.Group.groupSlug, groupid = Model.Group.Id, processid = Model.Id })' ;
                }
            })
        })
    })
    </script>
}