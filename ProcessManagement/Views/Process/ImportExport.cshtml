@model ProcessManagement.Models.Group
@{
    ViewBag.Title = "Import/Export Process";
    var processlist = ViewData["processes"] as List<ProcessManagement.Models.Process>;
    var group = ViewData["group"] as ProcessManagement.Models.Group;
}

@section CustomCss{
    <link rel="stylesheet" href="~/Content/vendor/select2/dist/css/select2.min.css" />
}
<div class="block-header">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <a href="javascript:void(0);" class="btn btn-xs btn-link primary-theme btn-toggle-fullwidth primary-theme">
                <i class="fa fa-arrow-left"></i>
            </a>
            <ul class="breadcrumb">
                <li><a href="@Url.RouteUrl("GroupLocalizedDefault", new { controller = "group", action = "index"})"><i class="icon-home"></i></a></li>
                <li><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "show", groupid = group.Id })">Group: @group.Name</a></li>
                <li><a href="javascript:void(0);"><i class="icon-cloud-upload"></i> Import / Export</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="header">
                <h5>Import Process</h5>
            </div>
            <div class="body" style="padding-top:0">
                <div class="row">
                    <div id="process-import-container" class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                        <input type="text" id="process-import-preview" class="form-control" readonly />
                        <input type="file" accept=".pms" id="process-import" style="display:none" />
                        <button class="btn btn-none waves-effect" id="btn-trigger" data-trigger="process-import"><i class="icon-magnifier"></i></button>
                    </div>
                </div>
                <button class="btn btn-primary-theme waves-effect" id="btn-process-import" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Uploading...">Upload</button>
                <ul style="padding:20px;font-size:16px">
                    <li>Export process you want to copy first</li>
                    <li>Import file with .pms extension only</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="header">
                <h5>Export Process</h5>
            </div>
            <div class="body" style="padding-top:0">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12" id="process-export-container">
                        <select>
                            <option></option>
                        </select>
                        
                    </div>
                </div>
                <button class="btn btn-primary-theme waves-effect" id="btn-process-export" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Export">Export</button>

                <ul style="padding:20px;font-size:16px">
                    <li>Input name process you want to export</li>
                    <li>After downloaded file, please dont change anything, import it in import section</li>
                </ul>
            </div>
        </div>
    </div>
</div>
@section CustomScripts{
    <script src="~/Content/vendor/select2/dist/js/select2.min.js"></script>
    <script>
        $(function () {
            $("#btn-trigger").on("click", function () {
                var target = $(this)[0].dataset.trigger;
                $(`#${target}`).trigger("click");
            });
            $("#process-import").on("change", function () {
                var preview = $("#process-import-preview");
                $("#process-import-container").addClass("has-file");
                var $this = $(this);
                var upload = $(this)[0].files[0];

                preview.val(upload.name);
                if ($("#process-import-remove").length == 0) {
                    var remove = $(`<button class="btn btn-none waves-effect" id="process-import-remove"><i class="icon-trash"></i></button>`).insertBefore(preview);
                    remove.show(500);
                    remove.on("click", function () {
                        preview.val("");
                        $this.val("");
                        $("#process-import-container").removeClass("has-file");

                        $(this).hide(500, () => { $(this).remove(); })
                    });
                }
            });
            $("#btn-process-import").on("click", function () {
                var upload = $("#process-import")[0].files[0];
                var $this = $(this);
                if (upload == undefined) {
                    showToastr("error", "You can't upload empty file", "toast-bottom-left");
                } else {
                    var fileExtension = upload.name.replace(/^.*\./, '');
                    fileExtension = fileExtension.toLowerCase().trim();
                    if (fileExtension != "pms") {
                        showToastr("error", "Please import file with .pms extention", "toast-bottom-left");
                    } else {
                        var data = new FormData();
                        data.append("groupid", @Model.Id);
                        data.append("fileupload", upload);
                        importProcess($this, data);
                    }

                }
            });
            $("#process-export-container select").select2({
                placeholder: "Search process by name ...",
                allowClear: true,
                ajax: {
                    delay: 500,
                    url: "@Url.Action("showprocesslist", "process", new { area ="api"})",
                    dataType: 'json',
                    data: function (params) {
                        var query = {
                            key: params.term,
                            groupid: @Model.Id
                        }
                        return query;
                    },
                    processResults: function (data) {
                        return {
                            results: data.results
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) { return markup; },
                templateResult: displayItem,
                templateSelection: displayItemSelection,
            });
            $("#process-export-container select").on('select2:select', function (e) {
                var btnDetail = $("#btn-process-detail");
                if (btnDetail.length == 0) {
                    $("#process-export-container").append(`<button class="btn btn-warning waves-effect" id="btn-process-detail"><i class="icon-info"></i> Detail</button>`);
                    $("#btn-process-detail").on("click", function () {
                        var strWindownFeatures = `toolbars=no,scrollbars=yes,status=no,resizable=no,location=no,width=${$(window).width()},height=${$(window).height()}`;
                        var url = `http://localhost:8080/en/my-group-6128/process/showstep?processid=4382`;
                        WindowObject = window.open(url, "ProcessName::Detail", strWindownFeatures);
                        WindowObject.document.close();
                        WindowObject.focus();
                    });
                }
            });
            $("#process-export-container select").on('select2:unselect', function (e) {
                $("#btn-process-detail").remove();
            });
            $("#btn-process-export").on("click", function () {
                var $this = $(this);
                var processid = $("#process-export-container select").select2("data")[0].id;
               
                if ( processid == "") {
                    showToastr("error", "Please input process name to export process", "toast-bottom-left");
                } else {
                    toggleLoading($this);
                    exportProcess($this, processid);
                }
            });

        });
        function displayItemSelection(item) {
            return item.text;
        } 
        function displayItem(item) {
            if (item.loading) return item.text;
            return `<img class="mr-3 process-avatar img-responsive" src="${item.avatar}" alt="${item.text}" /> ${item.text}`;
        }
        function importProcess(element, data) {
            $.ajax({
                url: "@Url.Action("import", "process", new { area = "api" })",
                type: "POST",
                data: data,
                contentType: false,
                processData: false,
                dataType: "json",
                beforeSend: function () {
                    toggleLoading(element);
                },
                complete: function () {
                    toggleLoading(element);
                },
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {

                    } else {
                        showToastr("error", response.message, "toast-bottom-left")
                        console.error(response)
                    }
                }
            });
        }
        function exportProcess(element,processid){
            $.ajax({
                url: "@Url.Action("Export", "process", new { area = "api"})",
                type: "POST",
                data: { processid: processid},
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status != 200) {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    } else {
                        var downloadAction = window.origin + "/file/download/" + response.data;
                        window.open(downloadAction);
                        $.alert({
                            backgroundDismiss: 'buttonName',
                            title:"Tip",
                            content: `If file not download automatically. <a href="${downloadAction}">Click Here</a>.`
                        });
                    }
                    toggleLoading(element);
                }
            })
        }
    </script>
}

