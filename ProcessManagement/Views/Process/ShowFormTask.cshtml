@model ProcessManagement.Models.TaskProcess
@{
    ViewBag.Title = "AddTaskFormProcess";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var step = ViewData["Step"] as ProcessManagement.Models.Step;
    var group = ViewData["Group"] as ProcessManagement.Models.Group;
    var roles = ViewData["ListRole"] as List<ProcessManagement.Models.Role>;
    var userRole = ViewData["UserRoles"] as ProcessManagement.Models.Participate;
    var isManager = userRole.IsManager;
    var files = ViewData["Files"] as List<ProcessManagement.Models.FileManager>;
    var maxFileSizeRule = ViewData["FileMaxSize"] as ProcessManagement.Models.ConfigRule;
}


@section CustomCss{
    <link rel="stylesheet" href="~/Content/vendor/dropify/css/dropify.min.css">
    <link rel="stylesheet" href="~/Content/vendor/select2/dist/css/select2.min.css" />
    <link rel="stylesheet" href="~/Content/vendor/switchery/dist/switchery.min.css" />
}
<div class="block-header">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <a href="javascript:void(0);" class="btn btn-xs btn-link primary-theme btn-toggle-fullwidth primary-theme">
                <i class="fa fa-arrow-left"></i>
            </a>
            <ul class="breadcrumb">
                <li><a href="@Url.RouteUrl("GroupLocalizedDefault", new { controller = "group", action = "index"})"><i class="icon-home"></i></a></li>
                <li><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "show", groupid = group.Id })">Group: @group.Name</a></li>
                <li><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "process", action = "showstep", groupid = group.Id, processid= step.Process.Id })">Process: @step.Process.Name</a></li>
                <li><a href="javascript:void(0);">Step: @step.Name</a></li>
                <li><a href="javascript:void(0);">Task: @Model.Name  (&ensp;<i class="icon-pencil"></i> edit&ensp;)</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body">
                <div class="row clearfix">
                    <div class="col-md-12 col-sm-12">
                        @Html.Partial("~/Views/Shared/Common/_File.cshtml", new ViewDataDictionary { { "filess", files }, { "UserRoles", userRole } })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body form-validation" id="show-task">
                <div class="row clearfix">
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label for="task-name" class="required">Task Name</label>
                            <input type="text" class="form-control" id="task-name" name="@Html.NameFor(m => m.Name)" value="@Model.Name" required disabled>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <label for="task-role">Select Role</label>
                        <select id="task-role" class="form-control show-tick ms select2" disabled>
                            <option></option>
                            @foreach (var role in roles.Where(x => x.IsRun == null || x.IsRun == false))
                            {
                                <option value="@role.Id">@role.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row clearfix">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="task-description">Description</label>
                            <textarea class="form-control" rows="6" placeholder="Write something about your task (optional)" id="task-description" name="@Html.NameFor(m => m.Description)" disabled>@Model.Description</textarea>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="build-wrap" class="required">Form builder</label>
                            <div id="build-wrap"></div>
                            <div class="render-wrap" id="render-wrap"></div>
                        </div>
                    </div>
                    @if (isManager)
                    {
                        <div class="col-sm-12">
                            <div class="mt-2" id="button-action">
                                <button id="btn-edit" class="btn btn-primary-theme waves-effect">Edit</button>
                                <button data-action="@Url.RouteUrl("GroupControlLocalizedDefault",new { controller = "process", action = "deletetask", taskid = Model.Id })" class="btn btn-danger waves-effect" id="btn-remove-task" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Processing...">Delete</button>
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
</div>
@section CustomScripts{
    <script src="~/Content/vendor/dropify/js/dropify.min.js"></script>
    <script src="~/Content/vendor/select2/dist/js/select2.min.js"></script>
    <script src="~/Content/vendor/switchery/dist/switchery.min.js"></script>
    <script src="~/Content/vendor/jquery-ui-custom/jquery-ui.min.js"></script>
    <script src="~/Content/vendor/FormBuilder/form-builder.min.js"></script>
    <script src="~/Content/vendor/FormBuilder/form-render.min.js"></script>

    <script>
        $(function () {
            var bAction = `<button id="btn-save" class="btn btn-primary-theme waves-effect">Save</button>
                            <button id="btn-back" class="btn btn-default waves-effect">Back</button>`;
            var showForm = $("#show-task").html();
            var taskform = '@Model.ValueFormJson'.replace(/&quot;/g, "\"");
            var formb;
            var optionRender = {
                uploadFile: function (fieldData) {
                    var attr = [];
                    if (fieldData.required) {
                        attr.push("required");
                    }
                    attr.push(`maxsize= ${fieldData.maxfilesize}${fieldData.unit}`);
                    if (fieldData.value == "undefined" || fieldData.val == "") {
                        attr.push(`data-default-file=${fieldData.value}`);
                    }
                    return {
                        field: `<input type="file" id="${fieldData.name}" ${attr.join(" ")}>`,
                        onRender: function () {
                            var inputfile = $(`#${fieldData.name}`);
                            inputfile.dropify();
                        }
                    };
                }
            }
            if (taskform != null) {
                $("#render-wrap").formRender({ templates: optionRender, formData: taskform });
            }
            var switchArr = createSwitch();
            switchArr.forEach(item => item.disable());

            $("select#task-role").select2({
                placeholder: "Select Role",
                allowClear: true,
            }).select2('val', @Model.IdRole);

            //Button edit

            $("body").on("click", "#btn-edit",function () {
                var $this = $(this);
                var temp = bAction;
                var options = {
                    disableFields: [
                        'header',
                        'button',
                        'hidden',
                        'autocomplete',
                        'file'
                    ],
                    disabledAttrs: [
                        'access',
                        'className',
                        'placeholder',
                        'name',
                        'value',
                        'inline',
                        'other',
                        'step',
                        'toggle'
                    ],
                    disabledSubtypes: {
                        textarea: ['quill']
                    },
                    fields: [{
                        label: 'Upload File',
                        attrs: {
                            type: 'uploadFile'
                        },
                        icon: `<img src="https://img.icons8.com/ios/16/000000/upload.png">`
                    }],
                    templates: {
                        uploadFile: function (fieldData) {
                            return {
                                field: '<input type="file" id="' + fieldData.name + '">',
                                onRender: function () {
                                    var inputfile = $(`#${fieldData.name}`);
                                    inputfile.dropify();
                                }
                            };
                        }
                    },
                    typeUserAttrs: {
                        uploadFile: {
                            maxfilesize: {
                                label: 'Max Size',
                                value: '10',
                                type: 'number'
                            },
                            unit: {
                                label: 'Unit',
                                options: {
                                    'b': 'Byte',
                                    'mb': 'Megabyte',
                                    'kb': 'Kilobyte',
                                    'gb': 'Gigabyte'
                                },
                                value: 'mb'
                            }

                        }
                    },
                    formData: taskform,
                    showActionButtons: false
                };
                if (taskform != null) {
                    formb = $("#build-wrap").formBuilder(options);
                }

                var actionButton = $this.parents("#button-action");
                actionButton.html(temp);
                $("#show-task").find("input[type!='checkbox'], select#task-role, textarea").prop("disabled", function () {
                    return !$(this).prop("disabled");
                });
                switchArr.forEach(item => item.enable());
                $("#render-wrap").empty();
            });
            document.addEventListener('fieldAdded', function (e) {
                var formContainer = $("#build-wrap").parents(".form-group")
                formContainer.find(".error-message").remove();
                formContainer.removeClass("error");
            });
            var form = $(".form-validation").formValidation();
            //Button back
            $("body").on("click", "#btn-back", function () {
                $("#show-task").html(showForm);
                switchArr = createSwitch();
                if (taskform != null) {
                    $("#render-wrap").formRender({ templates: optionRender, formData: taskform });
                    $("#build-wrap").empty();
                }
            });
            $("body").on("click", "#btn-save", function () {
                $this = $(this);
                toggleLoading($this);

                var name = $('#task-name').val();
                var role = $('#task-role').val();
                var description = $('#task-description').val();

                var formBuilder = formb.actions.getData('json', true).replace(/\r?\n|\r/g, '');
                formBuilder = JSON.parse(formBuilder);

                var tempArr = []
                for (var i = 0; i < formBuilder.length; i++) {
                    tempArr.push(formBuilder[i]);
                }
                var isHaveError = form.validates();
                if (tempArr.length == 0) {
                    var element = $("#build-wrap");
                    form.setFormError(element, "At least one input in form");
                    isHaveError = true;
                }
                if (isHaveError) {
                    toggleLoading($this);
                    showToastr("error", "Error!!", "toast-bottom-left")
                    return false;
                }
                let data = {
                    name: name,
                    idRole: role,
                    description: description,
                    formBuilder: JSON.stringify(tempArr)
                }
                if (name == "") {
                    showToastr("error", "Task name not null", "toast-bottom-left");
                    toggleLoading($this);
                } else {
                    editFormTask(data);
                }
            });
            $("body").on("click", "#btn-remove-task", function () {
                var $this = $(this);
                var action = $this[0].dataset.action;
                setConfirm(null, `Are you sure you want to delete this task ?`, function () {
                    toggleLoading($this);
                    localStorage.setItem("showStep", @step.Id);
                    setTimeout(function () {
                        window.location.href = action;
                    },1000);
                });
            })
        });
        function editFormTask(data) {
             $.ajax({
                url: "@Url.Action("editFormTask", "process",new {area = "api"})",
                type: "POST",
                data: data,
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                        localStorage.setItem("showStep", @step.Id);
                        location.href = '@Url.RouteUrl("GroupControlLocalizedDefault",new { controller = "process" ,action = "showstep", groupslug = group.groupSlug, groupid = group.Id, processid = step.IdProcess })';
                    } else {
                        console.error(response)
                    }
                }
            });
        }
    </script>
    <script>
        $(function () {
            //fileupload
            @if (maxFileSizeRule != null)
            {
                int value = maxFileSizeRule.Value;
                string unit = maxFileSizeRule.Unit.ToLower().Trim();
                int pow;
                switch (unit)
                {
                    case "kb":
                        pow = 1;
                        break;
                    case "mb":
                        pow = 2;
                        break;
                    case "gb":
                        pow = 3;
                        break;
                    default:
                        pow = 0;
                        break;
                }
                double toByte = value * Math.Pow(1024, pow);
                @:var maxFileSize = @toByte;
            }
            else
            {
                @:var maxFileSize = null;
            }
            $("#btn-file").on("click", function () {
                $("#FileUpload").trigger("click");
            });
            $(document).on("click", ".btn-file-remove", function () {
                var id = this.dataset.src;
                var fileName = $(this).parents("tr").find("td:first-child").text().trim();
                setConfirm(null, `Are you sure you want to delete "${fileName}"?`, function () {
                    removeFile(id);
                });
            })
            $(document).on("click", ".btn-file-changename", function () {
                var id = this.dataset.src;
                var fileName = $(this).parents("tr").find("td:first-child").text().trim();
                var dialog = $.confirm({
                    title: `Change File Name (${fileName})`,
                    content:'<div class="form-group">' +
                        '<label>Filename</label>' +
                        '<input type="text" placeholder="Enter your new file name" class="name form-control" required />' +
                        '</div>',
                    columnClass: 'medium',
                    closeIcon: true,
                    closeIconClass: 'fa fa-close',
                    buttons: {
                        save: {
                            btnClass: 'btn-none waves-effect',
                            action: function () {
                                var newFileName = this.$content.find('input').val().trim();
                                if (newFileName == "") {
                                    showToastr("error", "File Name is required");
                                } else {
                                    dialog.close();
                                    setConfirm(null, `Are you sure you want to change from <b>${fileName}</b> to <b>${newFileName}</b>?`, function () {
                                        changeFileName(id, newFileName);
                                    });

                                }
                                return false;
                            }
                        },
                        cancel: {
                            btnClass: 'btn-none waves-effect',
                        }
                    },
                    onContentReady: function () {
                        this.$content.find("input").val(fileName);
                    },
                });
            })
            $("#FileUpload").on("change", function () {
                //var fileName = e.target.files[0].name;
                var file = this.files[0];
                var fileName = file.name;
                var fileSize = file.size;
                if (maxFileSize != null && fileSize > maxFileSize) {
                    showToastr("error", `This file is too big (@maxFileSizeRule.Value @maxFileSizeRule.Unit maximum)`);
                } else {
                    setConfirm(null, `Are you sure you want to upload "${fileName}"?`, function () {
                        addFile(file);
                    });
                }
                $(this).val("");

            });
        });
        function addFile(file) {
            var data = new FormData();
            data.append("FileUpload", file);
            data.append("groupid", @group.Id);
            data.append("taskid",@Model.Id)
            data.append("direction", "@Direction.Task");
            $.ajax({
                url: "@Url.Action("uploadfile", "file", new { area = "api"})",
                type: "POST",
                data: data,
                contentType: false,
                processData: false,
                dataType: "json",
                success: function (response) {
                    //thanh cong thi no tra du lieu ve
                    console.log(response);
                    if (response.status == 200) {
                        showToastr("success", response.message, "toast-bottom-left");
                        var file = renderFile(response.data)
                        $("#file-list tbody").append(file);
                    } else {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    }
                }
            })
        }
        function removeFile(id) {
            var data = {
                id: id,
                groupid : @group.Id
            }

            $.ajax({
                url: "@Url.Action("removefile", "file", new { area = "api"})",
                type: "POST",
                data: data,
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                        showToastr("success", response.message, "toast-bottom-left");
                        $(`[data-src="${id}"]`).parents("tr").fadeOut(500, function () {
                            $(this).remove();
                        })
                    } else {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    }
                }
            })
        }
        function renderFile(file) {
            return `<tr>
                        <td>
                            <a href="href="/file/download/${file.id}">
                                ${file.name}
                            </a>
                        </td>
                        <td style="text-align:center">
                            <button class="btn btn-primary-theme waves-effect btn-file-changename" data-src="${file.id}" data-toggle="tooltip" data-placement="top" title="Change Name">
                                <i class=" icon-pencil"></i>
                            </button>
                            <button class="btn btn-danger waves-effect btn-file-remove" data-src="${file.id}" data-toggle="tooltip" data-placement="top" title="Remove">
                                <i class="icon-trash"></i>
                            </button>
                        </td>
                    </tr>`

        }
        function changeFileName(id,filename) {
            var data = {
                id: id,
                groupid: @group.Id,
                filename: filename
            }

            $.ajax({
                url: "@Url.Action("changefilename", "file", new { area = "api"})",
                type: "POST",
                data: data,
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                        showToastr("success", response.message, "toast-bottom-left");
                        $(`[data-src="${id}"]`).parents("tr").find('td:first-child a').text(response.data.name);
                    } else {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    }
                }
            })
        }
    </script>
}